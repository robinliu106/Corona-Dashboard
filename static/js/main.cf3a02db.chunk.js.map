{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","dynamicUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf3a02db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\nimport styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    console.log(confirmed);\n    if (!confirmed) {\n        return \"Loading...\";\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.infected)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.recovered)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of Recoveries from COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.deaths)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of deaths of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let dynamicUrl = url;\n\n    if (country) {\n        dynamicUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        //destructure data\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(dynamicUrl);\n\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        console.log(\"fetch daily data error\", error);\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const {\n            data: { countries },\n        } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(\"fetch countries error\", error);\n    }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchAPI();\n    }, []);\n\n    const lineChart = dailyData.length ? (\n        <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [\n                    {\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: \"Infected\",\n                        borderColor: \"#3333ff\",\n                        fill: true,\n                    },\n                    {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: \"Deaths\",\n                        borderColor: \"red\",\n                        backgroundColor: \"rgba(255,0,0,0.5)\",\n                        fill: true,\n                    },\n                ],\n            }}\n        />\n    ) : null;\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                datasets: [\n                    {\n                        label: \"People\",\n                        backgroundColor: [\n                            \"rgba(0, 0, 255, 0.5)\",\n                            \"rgba(0, 255, 0, 0.5)\",\n                            \"rgba(255, 0, 0, 0.5)\",\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: {\n                    display: true,\n                    text: `Coronavirus cases in ${country}`,\n                },\n            }}\n        />\n    ) : null;\n\n    return (\n        <div className={styles.container}>{country ? barChart : lineChart}</div>\n    );\n};\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        };\n        fetchAPI();\n    }, []);\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect\n                defaultValue=\"\"\n                onChange={(e) => {\n                    handleCountryChange(e.target.value);\n                }}\n            >\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => (\n                    <option key={i} value={country}>\n                        {country}\n                    </option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    );\n};\nexport default CountryPicker;\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: \"\",\n    };\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({ data: fetchedData });\n        // console.log(fetchedData);\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({ data: fetchedData, country });\n        console.log(\"current country\", country);\n    };\n\n    render() {\n        const { data, country } = this.state;\n        return (\n            <div className={styles.container}>\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\n\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}